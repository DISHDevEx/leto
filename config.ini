; ##################################################################################################################################
; Defualt:
; ##################################################################################################################################
[DEFAULT]
input_bucket_s3 = leto-dish
output_bucket_s3 = leto-dish
model_bucket_s3 = leto-dish ; s3 bucket of the pre-trained model
region = us-east-1

; ##################################################################################################################################
; REDUCTION (R1) METHODS:
; ##################################################################################################################################
[reduction.fps_bitrate]
; method specific parameters:
fps = 10 ; set the desired fps (frames per second)
bitrate = 0 ; Sets the bitrate of the video in KB/s. If bitrate is set as 0, then the framework will do a 10x reduction.

; s3 prefixs for input/output:
method_name = fps_bitrate
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/${method_name}-fps_${fps}-bitrate_${bitrate}/
temp_path = reduced-videos/ ; A temp folder to store video for uploading to s3


[reduction.ffmpeg_resolution_downsampler]
; method specific paramgers:
quality = 360p ; Can use: 240p, 360p,480p,720p,1080p as inputs
algorithm = lanczos ; Refer https://ffmpeg.org/ffmpeg-scaler.html to see the ffmpeg scaler algorithms

; s3 prefixs for input/output
method_name = ffmpeg_rd
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/${method_name}-quality_${quality}-algorithm_${algorithm}/
temp_path = reduced-videos/ ; A temp folder to store video for uploading to s3


[reduction.cv2_jpg_reduction]
; method specific paramgers:
quality = 15 ; The compression rate for cv2 to apply, 100 is for best video quality, 0 is for the worse video quality
crf = 28 ; the constant rate factor for ffmpeg to encode the video, the lower value results in higher quality. The range is 0-51

; s3 prefixs for input/output
method_name = cv2_jpg
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/${method_name}-quality_${quality}-crf_${crf}/
temp_path = reduced-videos/ ; A temp folder to store video for uploading to s3

; ##################################################################################################################################
; RECONSTRUCTION (R2) METHODS:
; ##################################################################################################################################
[reconstruction.fastsrgan]
; method specific parameters:
codec = mp4v ; desired video codec

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate if local model should be deleted
codec = mp4v ; desired video codec

; desired video resolution
height = 1080
width = 1920

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not

; s3 prefixs for input/output paths and models:
input_prefix_s3 = reduced-videos/benchmark/ffmpeg-resolution-downsampler/car/
output_prefix_s3 = reconstructed-videos/benchmark/fastsrgan/car/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model

[reconstruction.background_addition]
; method specific parameters:

; s3 prefixs for input/output:
method_name = background_addition
input_prefix_s3 = reduced-videos/background_subtractor/
output_prefix_s3 = reconstructed-videos/%(method_name)s/