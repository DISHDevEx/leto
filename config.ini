[DEFAULT]
input_bucket_s3 = leto-dish
output_bucket_s3 = leto-dish
model_bucket_s3 = leto-dish ; s3 bucket of the pre-trained model


; REDUCTION (R1) METHODS: 

[reduction.fps_bitrate]
; method specific parameters:
fps = 20
bitrate = 100

; s3 prefixs for input/output:
method_name = fps_bitrate
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/%(method_name)s-fps_%(fps)s-bitrate_%(bitrate)s/


[reduction.ffmpeg_resolution_downsampler]
; method specific paramgers:
quality = 360p ; Can use: 240p, 360p,480p,720p,1080p as inputs
algorithm = lanczos ; Refer https://ffmpeg.org/ffmpeg-scaler.html to see the ffmpeg scaler algorithms

; s3 prefixs for input/output
method_name = ffmpeg_rd
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/%(method_name)s-quality_%(quality)s-algorithm_%(algorithm)s/


[reduction.cv2_jpg_reduction]
; method specific paramgers:
temp_path = temp ; A temp folder to store video from uploading to s3
quality = 15 ; The compression rate for cv2 to apply, 100 is for best video quality, 0 is for the worse video quality
crf = 28 ; the constant rate factor for ffmpeg to encode the video, the lower value results in higher quality. The range is 0-51

; s3 prefixs for input/output
method_name = cv2_jpg
input_prefix_s3 = original-videos/
output_prefix_s3 = reduced-videos/%(method_name)s-quality_%(quality)s-crf_%(crf)s/

; RECONSTRUCTION (R2) METHODS:

[reconstruction.recon_args]
; method specific parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not  input video
codec = mp4v ; desired video codec
fps = 25 ; frames per second

; desired video resolution
height = 1080
width = 1920

; s3 prefixs for input/output paths and models:
input_prefix_s3 = reduced-videos/benchmark/ffmpeg-resolution-downsampler/car/
output_prefix_s3 = reconstructed-videos/benchmark/misc/car/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model


[reconstruction.fastsrgan]
; method specific parameters:
codec = mp4v ; desired video codec

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not  input video

; s3 prefixs for input/output paths and models:
method_name = fastsrgan
input_prefix_s3 = reduced-videos/fps_bitrate-fps_10-bitrate_0/
output_prefix_s3 = reconstructed-videos/%(method_name)s-codec_%(codec)s/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model


[reconstruction.opencv_ru]
; method specific parameters:
codec = mp4v ; desired video codec

; desired video resolution
height = 1080
width = 1920

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not

; s3 prefixs for input/output paths and models:
method_name = opencv_ru
input_prefix_s3 = reduced-videos/fps_bitrate-fps_10-bitrate_0/
output_prefix_s3 = reconstructed-videos/%(method_name)s-codec_%(codec)s-resolution_%(height)sX%(width)s/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model


[reconstruction.realbasicvsr]
; method specific parameters:
codec = mp4v ; desired video codec
fps = 25 ; frames per second

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not

; s3 prefixs for input/output paths and models:
method_name = realbasicvsr
input_prefix_s3 = reduced-videos/fps_bitrate-fps_10-bitrate_0/
output_prefix_s3 = reconstructed-videos/%(method_name)s-codec_%(codec)s-fps_%(fps)s/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model


[reconstruction.superres]
; method specific parameters:
codec = mp4v ; desired video codec

; desired video resolution
height = 1080
width = 1920

; cloud_functionality parameters:
download_model = True ; boolean to indicate if a model needs to be downloaded
local_model_path = fastsrgan.h5 ; local path to save pre-trained model
clean_model = True ; boolean to indicate to clean video or not

; s3 prefixs for input/output paths and models:
method_name = superres
input_prefix_s3 = reduced-videos/fps_bitrate-fps_10-bitrate_0/
output_prefix_s3 = reconstructed-videos/%(method_name)s-codec_%(codec)s-resolution_%(height)sX%(width)s/
model_prefix_s3 = pretrained-models/fastsrgan.h5 ; s3 prefix of the pre-trained model